# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on: push

permissions:
  issues: write
  checks: write
  contents: write
  pull-requests: write

env:
  TYPE: ${{ endsWith(github.ref_name, 'main') && 'release' || (endsWith(github.ref_name, 'beta') && 'beta' || 'dev') }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "⬇️ Checkout"
        uses: actions/checkout@v3

      - name: Cache Gradle dependencies
        id: cache-gradle-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/forge/.gradle/caches
            ~/fabric/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: "🛂 Validate Gradle Wrapper"
        uses: gradle/wrapper-validation-action@v1

      - name: "☕ Setup Jdk 21"
        uses: actions/setup-java@v4
        with:
          cache: 'gradle'
          java-version: 21
          distribution: 'temurin'

      - name: "🔃 Use Latest Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: "🔓 Adjust the release permissions"
        run: chmod a+x ./scripts/release.sh && chmod +x ./gradlew

      - name: "🧵 Install semantic release"
        run: npm i --location=global semantic-release semantic-release-discord-notifier conventional-changelog-conventionalcommits @semantic-release/github @semantic-release/changelog @semantic-release/exec semantic-release-export-data semantic-release-discord

      - name: "🔢 Determine version"
        run: npx semantic-release --dry-run
        id: get-next-version
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      - name: "ℹ️ Needs Release?"
        run: echo "Needs release published? ${{ steps.get-next-version.outputs.new-release-published == 'true' }}"

      - name: "🏗️ Build & Release to GitHub"
        if: ${{ steps.get-next-version.outputs.new-release-published == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          DO_PUBLISH: steps.get-next-version.outputs.new-release-published
          MODRINTH_ID: ${{ vars.MODRINTH_ID }}
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
          CURSEFORGE_ID: ${{ vars.CURSEFORGE_ID }}
          CURSEFORGE_TOKEN: ${{ secrets.CURSEFORGE_TOKEN }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: npx semantic-release

      - name: "🧪 Run Dev Build"
        if: ${{ steps.get-next-version.outputs.new-release-published != 'true' }}
        run: ./gradlew chiseledBuild

      - name: "🕵️‍♂️ Collect jars"
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: |
            build/libs/*.jar

