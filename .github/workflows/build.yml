# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on: [pull_request, push]

permissions:
  issues: write
  checks: write
  contents: write
  pull-requests: write

env:
    MC_VERSION: 1.20.1
  # release type is release when branch is main, alpha when branch is alpha and beta when branch is beta
    RELEASE_TYPE: ${{ github.ref_name == 'MC$MC_VERSION' && 'release' || startsWith(github.ref_name, 'alpha-') && 'alpha' || startsWith(github.ref_name, 'beta-') && 'beta' }}

jobs:
  build:
    strategy:
      matrix:
        # Use these Java versions
        java: [
          17,    # Current Java LTS & minimum supported by Minecraft
        ]
        # and run on both Linux and Windows
        os: [ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    steps:
      - name: "‚¨áÔ∏è Checkout"
        uses: actions/checkout@v3

      - name: Cache Gradle dependencies
        id: cache-gradle-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/forge/.gradle/caches
            ~/fabric/.gradle/caches
            ~/common/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: "üõÇ Validate Gradle Wrapper"
        uses: gradle/wrapper-validation-action@v1

      - name: "‚òï Setup Jdk ${{ matrix.java }}"
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'microsoft'

      - name: "üîÉ Use Latest Node.js"
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }}
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: "üîì Adjust the release permissions"
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }}
        run: chmod a+x ./scripts/release.sh && chmod +x ./gradlew

      - name: "üßµ Install semantic release"
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }}
        run: npm i --location=global semantic-release conventional-changelog-conventionalcommits @semantic-release/github @semantic-release/changelog @semantic-release/exec semantic-release-export-data

      - name: "üî¢ Determine version"
        run: npx semantic-release --dry-run
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }}
        id: get-next-version
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}

      - name: "‚ÑπÔ∏è Needs Release?"
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }}
        run: echo "Needs release published? ${{ steps.get-next-version.outputs.new-release-published == 'true' }}"

      - name: "‚ÑπÔ∏è Release type is"
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }}
        run: echo "Release type is ${{ env.RELEASE_TYPE }}"

      - name: "üèóÔ∏è Build & Release to GitHub"
        if: ${{ runner.os == 'Linux' && matrix.java == '17' && (steps.get-next-version.outputs.new-release-published == 'true')  }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
        run: npx semantic-release

      - name: "üïµÔ∏è‚Äç‚ôÇÔ∏è Collect jars"
        if: ${{ runner.os == 'Linux' && matrix.java == '17' && (steps.get-next-version.outputs.new-release-published == 'true') }} # Only upload artifacts built from latest java on one OS
        uses: actions/upload-artifact@v3
        with:
          name: Artifacts
          path: |
            forge/build/libs/*.jar
            fabric/build/libs/*.jar
            !**/*-@(dev|sources|all|shadow).jar

      - uses: Kir-Antipov/mc-publish@v3.3
        name: "üöÄ Publish: Fabric ${{ env.RELEASE_TYPE }}"
        if: ${{ matrix.java == '17' && runner.os == 'Linux' && (steps.get-next-version.outputs.new-release-published == 'true') }}
        with:
          version-type: ${{ env.RELEASE_TYPE }}
          version: ${{ needs.get-next-version.outputs.new-release-version }}
          modrinth-id: ${{ vars.MODRINTH_ID }}
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}
          curseforge-id: ${{ vars.CURSEFORGE_ID }}
          curseforge-token: ${{ secrets.CURSEFORGE_TOKEN }}
          changelog-file: CHANGELOG.*
          files: fabric/build/libs/!(*-@(dev|sources|all|shadow)).jar
          loaders: |
            fabric
            quilt
          game-versions: |
            $MC_VERSION
          java: |
            17
          dependencies: |
            fabric-api(required)
          game-version-filter: releases

      - uses: Kir-Antipov/mc-publish@v3.3
        name: "üöÄ Publish: Forge ${{ env.RELEASE_TYPE }}"
        if: ${{ matrix.java == '17' && runner.os == 'Linux' && (steps.get-next-version.outputs.new-release-published == 'true') }}
        with:
          version-type: ${{ env.RELEASE_TYPE }}
          version: ${{ needs.get-next-version.outputs.new-release-version }}
          modrinth-id: ${{ vars.MODRINTH_ID }}
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}
          curseforge-id: ${{ vars.CURSEFORGE_ID }}
          curseforge-token: ${{ secrets.CURSEFORGE_TOKEN }}
          changelog-file: CHANGELOG.*
          files: forge/build/libs/!(*-@(dev|sources|all|shadow)).jar
          loaders: |
            forge
          game-versions: |
            $MC_VERSION
          java: |
            17
          game-version-filter: releases
